// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TrailLoaded.Models;

public partial class SchoolTrailContext : DbContext
{
    public SchoolTrailContext()
    {
    }

    public SchoolTrailContext(DbContextOptions<SchoolTrailContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ContactForm> ContactForms { get; set; }

    public virtual DbSet<NewAdmission> NewAdmissions { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost\\SQLEXPRESS;Initial Catalog=SchoolTrail;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ContactForm>(entity =>
        {
            entity.HasKey(e => e.ContactId).HasName("PK__ContactF__5C66259B180642AC");

            entity.ToTable("ContactForm");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsResolved).HasDefaultValue(false);
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.Phone).HasMaxLength(15);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.Subject).HasMaxLength(200);
        });

        modelBuilder.Entity<NewAdmission>(entity =>
        {
            entity.HasKey(e => e.AdmissionId).HasName("PK__NewAdmis__C97EEC42120FAC4E");

            entity.ToTable("NewAdmission");

            entity.HasIndex(e => e.AdmissionCode, "UQ__NewAdmis__977B722D4B53724F").IsUnique();

            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AdmissionCode)
                .HasMaxLength(20)
                .HasDefaultValueSql("(CONVERT([nvarchar],abs(checksum(newid()))%(1000000)))");
            entity.Property(e => e.AdmissionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Course)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(150);
            entity.Property(e => e.FatherName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FatherOccupation).HasMaxLength(100);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.MotherName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ParentAadhaar).HasMaxLength(20);
            entity.Property(e => e.ParentMobile)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Standard)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StudentAadhaar).HasMaxLength(20);
            entity.Property(e => e.StudentPhone).HasMaxLength(15);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}